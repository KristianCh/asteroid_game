require "modules.utils"

local function clamp_to_screen(self)
	x = self.pos.x
	y = self.pos.y
	if x > WIDTH-10 then 
		x = WIDTH-10
	elseif x < 10 then 
		x = 10 
	end
	
	if y > HEIGHT-20 then 
		y = HEIGHT-20
	elseif y < 20 then 
		y = 20 
	end
	return vmath.vector3(x, y, 0)
end

local function is_off_screen(self)
	return (self.pos.x > (WIDTH+30) or self.pos.x < -30 or self.pos.y > (HEIGHT+30) or self.pos.y < -30)
end

function init(self)
	self.pos = vmath.vector3(0)
	self.color = vmath.vector4(0)
	gui.set_enabled(gui.get_node("target_fill_angle"), false)
	gui.animate(gui.get_node("follower"), "color", vmath.vector4(1, 1, 1, 1), gui.EASING_INQUAD, 1)
end

function update(self, dt)
	local fill_angle = gui.get_fill_angle(gui.get_node("pie"))
	local target_fill_angle = gui.get_scale(gui.get_node("target_fill_angle"))
	fill_angle = vmath.lerp(dt * 5, vmath.vector3(fill_angle), target_fill_angle).x
	if fill_angle > 360 then fill_angle = 360 end
	if fill_angle < 0 then fill_angle = 0 end
	gui.set_fill_angle(gui.get_node("pie"), fill_angle)

	local follower = gui.get_node("follower")
	if gui.is_enabled(follower, false) then
		local follower_pos = clamp_to_screen(self)
		gui.set_position(follower, clamp_to_screen(self))
		local scale = math.min(vmath.length(self.pos - follower_pos) / 350, 1)
		local heading = vmath.normalize(self.pos - follower_pos)
		local angle = math.deg(math.atan2(heading.y, heading.x)) - 90
		gui.set_rotation(follower, vmath.vector3(0, 0, angle))
		gui.set_scale(follower, vmath.vector3(scale, scale, 1))
		local a = gui.get_color(follower).w
		gui.set_color(follower, vmath.vector4(self.color.x*a, self.color.y*a, self.color.z*a, a))
		if is_off_screen(self) then
			if gui.get_color(follower).x == 0 then
				gui.animate(gui.get_node("follower"), "color.w", 1, gui.EASING_INQUAD, 1)
			end
		else 
			if gui.get_color(follower).x == 1 then
				gui.animate(gui.get_node("follower"), "color.w", 0, gui.EASING_INQUAD, 0.1)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_data") then
		self.pos = message.pos
		self.color = message.color
		gui.set_position(gui.get_node("pie"), self.pos)
	elseif message_id == hash("set_health") then
		local angle = message.health / message.max_health
		if angle < 0 then angle = 0 end
		gui.set_scale(gui.get_node("target_fill_angle"), vmath.vector3(angle * 360, 1, 1))
	elseif message_id == hash("set_scale") then
		gui.set_scale(gui.get_node("pie"), message.scale)
		gui.set_inner_radius(gui.get_node("pie"), 55 + (1.2 - message.scale.x) * 7)
	elseif message_id == hash("disable_asteroid_gui") then
		gui.set_enabled(gui.get_node("pie"), false)
		gui.set_enabled(gui.get_node("follower"), false)
	end	
end