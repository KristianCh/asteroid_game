require "modules.utils"
require "modules.drones.attack_drone"
require "modules.drones.kamikaze_drone"

go.property("heading", vmath.vector3(0, 1, 0))
go.property("target_position", vmath.vector3(WIDTH / 2, HEIGHT / 2, 0))
go.property("speed", 300)
go.property("visibility_range", 150)
go.property("evasion", 2)
go.property("damage", 10)
go.property("aoe_range", 1)
go.property("mothership_type", "fleet_carrier")
go.property("type", 1)

function init(self)
	self.init_type = attack_drone_init
	if self.type == 2 then
		self.init_type = kamikaze_drone_init
	end
	self.target_position = vmath.vector3(WIDTH / 2, HEIGHT / 2, 0)
	self.raycast_targets = { hash("ship_cast"), hash("asteroid"), hash("player_drone") }

	self.init_type(self)
end

function final(self)
	msg.post("/manager", "alert_special_ship", {type = self.mothership_type})
end

function update(self, dt)
	self.update_type(self, dt)
	
	local pos = go.get_position()
	local angle = math.deg(math.atan2(self.heading.y, self.heading.x)) - 90
	local rot_z = vmath.quat_rotation_z(math.rad(angle))
	go.set_rotation(rot_z)
	
	for i=-2,1 do
		local target = pos + vmath.vector3(math.cos(math.rad(i*30+angle+90+15)), math.sin(math.rad(i*30+angle+90+15)), 0) * self.visibility_range
		local result = physics.raycast(pos, target, self.raycast_targets)
		if result ~= nil then
			local dist = (self.visibility_range-vmath.length(pos - result.position))/self.visibility_range
			if dist > 1 then dist = 1 end
			self.heading = vmath.normalize(vmath.slerp(self.evasion * dt * dist, 
			self.heading, vmath.normalize(pos - result.position)))
		end
	end
	
	pos = pos + self.heading * self.speed * dt
	go.set_position(pos)
	
	self.update_type(self, dt)
end

function on_message(self, message_id, message, sender)
	self.message_type(self, message_id, message, sender)

	if message_id == hash("contact_point_response") then
		if message.other_group == hash("asteroid") or message.other_group == hash("asteroid_projectile") then
			go.delete()
		end
	elseif message_id == hash("self_destruct") then
		go.delete()
	end	
end



