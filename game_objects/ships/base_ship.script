go.property("target_pos", vmath.vector3(960, 500, 0))
go.property("heading", vmath.vector3(0, 1, 0))
go.property("speed", 250)
go.property("visibility_range", 150)
go.property("evasion", 2)

function init(self)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local max_x, max_y = window.get_size()
	local pos = go.get_position()
	
	if pos.x > max_x then
		pos.x = max_x
	elseif pos.x < 0 then
		pos.x = 0
	end

	if pos.y > max_y then
		pos.y = max_y
	elseif pos.y < 0 then
		pos.y = 0
	end
	
	self.target_pos = go.get_position("/fleet/target_position")
	local dist_to_target = vmath.length(self.target_pos - pos)
	local vec_to_target = vmath.normalize(self.target_pos - pos)
	if dist_to_target == 0 then
		vec_to_target = vmath.vector3(0, 1, 0)
	end
	--msg.post("@render:", "draw_line", {start_point = pos, end_point = self.target_pos, color = vmath.vector4(0, 0, 1, 1)})
	--msg.post("@render:", "draw_line", {start_point = pos, end_point = pos + self.heading*self.speed, color = vmath.vector4(0, 0, 1, 1)})
	self.heading = vmath.normalize(vmath.slerp(self.evasion * dt, self.heading, vec_to_target))
	local angle = math.deg(math.atan2(self.heading.y, self.heading.x)) - 90
	go.set(".", "euler.z", angle)

	for i=-3,2 do
		local target = pos + vmath.vector3(math.cos(math.rad(i*30+angle+90+15)), math.sin(math.rad(i*30+angle+90+15)), 0) * self.visibility_range
		local result = physics.raycast(pos, target, { hash("ship_cast") })
		if result ~= nil then
			--msg.post("@render:", "draw_line", {start_point = pos, end_point = result.position, color = vmath.vector4(0, 1, 0, 1)})
			local dist = (self.visibility_range-vmath.length(pos - result.position))/self.visibility_range
			if dist > 1 then dist = 1 end
			self.heading = vmath.normalize(vmath.slerp(self.evasion * dt * dist, 
							self.heading, vmath.normalize(pos - result.position)))
		else
			--msg.post("@render:", "draw_line", {start_point = pos, end_point = target, color = vmath.vector4(1, 0, 0, 1)})
		end
	end
	local res_speed = self.speed
	if dist_to_target < self.visibility_range - 50 then
		res_speed = self.speed * dist_to_target/(self.visibility_range - 50) + 50
	end
	pos = pos + self.heading * res_speed * dt
	go.set_position(pos)
end

function on_message(self, message_id, message, sender)
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
