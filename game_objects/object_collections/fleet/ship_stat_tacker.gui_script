local function clamp(n, min, max) 
	if n > max then return max
	elseif n < min then return min
	else return n end
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_pos") then
		gui.set_position(gui.get_node("health"), message.position)
		gui.set_position(gui.get_node("cooldown"), message.position)
	elseif message_id == hash("set_stats") then
		local health = clamp(message.health*360, 0, 360)
		local cooldown = clamp(message.cooldown*360, 0, 360)
		gui.set_fill_angle(gui.get_node("health"), health)
		gui.set_fill_angle(gui.get_node("cooldown"), cooldown)
	end	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
