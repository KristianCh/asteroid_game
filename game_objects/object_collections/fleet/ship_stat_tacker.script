go.property("type", 1)
go.property("is_flagship", false)
go.property("target_health", 0)
go.property("target_cooldown", 0)
go.property("health", 0)
go.property("cooldown", 0)

function init(self)
	for i=1,3 do
		if i ~= self.type then
			msg.post("#model_" .. i, "disable")
		end
	end
	go.set_scale(vmath.vector3(0.25))
	msg.post("#ship_stat_tacker", "set_pos", {position = go.get_position()})
	self.target_health = 1
	self.alive = 1
end

function update(self, dt)
	local rot = go.get_rotation() * vmath.quat_rotation_y(dt * self.alive)
	go.set_rotation(rot)
	self.health = vmath.lerp(10 * dt, self.health, self.target_health)
	self.cooldown = vmath.lerp(10 * dt, self.cooldown, self.target_cooldown)
	msg.post("#ship_stat_tacker", "set_stats", {health = self.health, cooldown = self.cooldown})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_health") then
		self.target_health = message.health
		if self.target_health < 0 then self.target_health = 0 end
	elseif message_id == hash("set_cooldown") then
		self.target_cooldown = message.cooldown
		if self.target_cooldown < 0 then self.target_cooldown = 0 end
	elseif message_id == hash("death") then
		go.set("#model_" .. self.type, "tint", vmath.vector4(0.4))
		self.alive = 0
	end
end