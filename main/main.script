local active_run_data = require "data.active_run_data"
local active_fleet = require "data.active_fleet"
local user_settings = require "data.config.user_settings"
local default_active_run_data = require "data.active_run_data"
local default_active_fleet = require "data.active_fleet"
local default_user_settings = require "data.config.user_settings"
require "modules.utils"

go.property("screen_dimensions", vmath.vector3(WIDTH, HEIGHT, 0))
go.property("transition", vmath.vector4(0, 1, 0, 0))
go.property("game_speed", 1)

local message_to_loaded_collection = {}
local settings_disabled_proxy = ""
local current_active_proxy = ""
local last_game_speed = 1
local debug = false
local start_time = 0
local is_paused = false
local easing = vmath.vector({ 0, 0.4, 0.2, 0.2, 0.5, 1 })

local function load_saved_data(filename, default)
	local file = sys.get_save_file("asteroid_game", filename)
	local data = sys.load(file)
	local new = copy_table(default)
	for k,v in pairs(data) do
		new[k] = v
	end
	return new
end

local function save_saved_data(filename, data)
	local file = sys.get_save_file("asteroid_game", filename)
	sys.save(file, data)
end

local function apply_settings(self) 
	if user_settings.fullscreen then
		defos.set_fullscreen(true)
	else 
		local was_fullscreen = defos.is_fullscreen()
		defos.set_fullscreen(false)
		if was_fullscreen then
			defos.set_maximized(true)
		end
	end
	msg.post("@render:", "set_fullscreen", {fullscreen = user_settings.fullscreen})
	msg.post("@render:", "set_crt", {enabled = user_settings.crt_shader})
	msg.post("@render:", "set_pixelate", {enabled = user_settings.pixel_shader})
	save_saved_data("user_settings", user_settings)
end

local function new_game_from_main(self) 
	msg.post("#main_menu_proxy", "disable")
	msg.post("#main_menu_proxy", "final")
	msg.post("#main_menu_proxy", "unload")
	
	msg.post("#new_game_proxy", "load")
	current_active_proxy = "#new_game_proxy"
end

local function continue_game_from_main(self)
	msg.post("#cursor", "disable_cursor")
	msg.post("#main_menu_proxy", "disable")
	msg.post("#main_menu_proxy", "final")
	msg.post("#main_menu_proxy", "unload")
	if true then
		msg.post("#game_proxy", "load")
		current_active_proxy = "#game_proxy"
	else
		msg.post("#store_proxy", "load")
		current_active_proxy = "#store_proxy"
	end
end

local function store_from_new(self) 
	msg.post("#new_game_proxy", "disable")
	msg.post("#new_game_proxy", "final")
	msg.post("#new_game_proxy", "unload")

	msg.post("#store_proxy", "load")
	current_active_proxy = "#store_proxy"
end

local function game_from_store(self)
	msg.post("#cursor", "disable_cursor")
	msg.post("#store_proxy", "disable")
	msg.post("#store_proxy", "final")
	msg.post("#store_proxy", "unload")

	msg.post("#game_proxy", "load")
	current_active_proxy = "#game_proxy"
end

local function store_from_game(self)
	msg.post("#cursor", "enable_cursor")
	msg.post("#game_proxy", "disable")
	msg.post("#game_proxy", "final")
	msg.post("#game_proxy", "unload")

	msg.post("#store_proxy", "load")
	current_active_proxy = "#store_proxy"
end

local function end_from_game(self)
	msg.post("#cursor", "enable_cursor")
	msg.post("#game_proxy", "disable")
	msg.post("#game_proxy", "final")
	msg.post("#game_proxy", "unload")

	msg.post("#end_screen_proxy", "load")
	current_active_proxy = "#end_screen_proxy"
end

local function window_resized(self, event, data)
	if event == window.WINDOW_EVENT_RESIZED then
		self.screen_dimensions = vmath.vector3(data.width, data.height, 0)
	end
end

local function main_from_end(self)
	msg.post("#end_screen_proxy", "disable")
	msg.post("#end_screen_proxy", "final")
	msg.post("#end_screen_proxy", "unload")

	msg.post("#main_menu_proxy", "load")
	current_active_proxy = "#main_menu_proxy"
end

local function new_from_end(self)
	msg.post("#end_screen_proxy", "disable")
	msg.post("#end_screen_proxy", "final")
	msg.post("#end_screen_proxy", "unload")

	msg.post("#new_game_proxy", "load")
	current_active_proxy = "#new_game_proxy"
end

local function open_settings(self)
	msg.post(current_active_proxy, "disable")
	settings_disabled_proxy = current_active_proxy
	msg.post("#settings_proxy", "load")
	current_active_proxy = "#settings_proxy"
end

local function close_settings(self)
	msg.post("#settings_proxy", "disable")
	msg.post("#settings_proxy", "final")
	msg.post("#settings_proxy", "unload")

	current_active_proxy = settings_disabled_proxy
	if current_active_proxy == "#game_proxy" and self.game_speed == 0 then
		msg.post("/borders#borders", "pause")
	end
	msg.post(current_active_proxy, "enable")	
	go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0, 1, 0, 0), easing, 1, 0, function(self) self.transition = vmath.vector4(0, 1, 0, 0) end)
end

local function return_to_main(self)
	msg.post(current_active_proxy, "disable")
	msg.post(current_active_proxy, "final")
	msg.post(current_active_proxy, "unload")

	msg.post("#main_menu_proxy", "load")
	current_active_proxy = "#main_menu_proxy"
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })	

	math.randomseed(os.clock()*100000000000)
	window.set_listener(window_resized)
	defos.set_maximized(true)

	defos.set_cursor_visible(false)

	msg.post("#main_menu_proxy", "load")
	go.set("/borders#sprite", "tint", vmath.vector4(1, 1, 1, 0.4))
	current_active_proxy = "#main_menu_proxy"	
	user_settings = load_saved_data("user_settings", default_user_settings)
	apply_settings(self)
	active_fleet = load_saved_data("active_fleet", default_active_fleet)
	active_run_data = load_saved_data("active_run_data", default_active_run_data)
end

function update(self, dt)
	print("fps: ", 1 / dt, dt)
	start_time = start_time + dt
	msg.post("@render:", "set_time", {start_time})
	msg.post("@render:", "set_transition", {self.transition})

	if current_active_proxy == "#game_proxy" and last_game_speed ~= self.game_speed then
		last_game_speed = self.game_speed
		msg.post("#game_proxy", "set_time_step", {factor = self.game_speed, mode = 0})
	end

	--msg.post("@render:", "draw_line", {start_point = vmath.vector3(0), end_point = vmath.vector3(1920, 1017, 0), color = vmath.vector4(1)})
end

function on_message(self, message_id, message, sender)
	--im not yandere dev, theres just no switch
	if message_id == hash("exit_game") then
		msg.post("@system:", "exit", {code = 0})
	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")

		if start_time > 0.1 then
			go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0, 1, 0, 0), easing, 1, 0, function(self) self.transition = vmath.vector4(0, 1, 0, 0) end)
		end
		if current_active_proxy == "#game_proxy" then
			msg.post("game:/fleet/fleet_manager#fleet_manager", "setup", {data = active_fleet, mouse_control = user_settings.mouse_controls})
			msg.post("game:/manager#wave_manager", "setup", {data = active_run_data})
			msg.post("game:/manager#manager", "setup", {data = active_run_data})
			self.game_speed = 1
		elseif current_active_proxy == "#settings_proxy" then
			msg.post("settings:/gui_container#settings", "setup", {data = user_settings})
		elseif current_active_proxy == "#main_menu_proxy" then
			if active_run_data.stage == 1 then
				msg.post("main_menu:/gui_container#main_menu", "disable_continue")
			end
		elseif current_active_proxy == "#store_proxy" then
			msg.post("store:/manager#manager", "init_run_data", active_run_data)
			msg.post("store:/manager#manager", "init_fleet", active_fleet)
		end
	elseif message_id == hash("proxy_unloaded") then
	elseif message_id == hash("new_game_from_main") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, new_game_from_main)
	elseif message_id == hash("continue_game_from_main") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, continue_game_from_main)
	elseif message_id == hash("store_from_new") then
		save_saved_data("active_fleet", default_active_fleet)
		active_fleet = copy_table(default_active_fleet)
		active_run_data = copy_table(default_active_run_data)
		save_saved_data("active_run_data", active_run_data)
		for k,v in pairs(message) do
			active_run_data[k] = v
		end
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, store_from_new)
	elseif message_id == hash("game_from_store") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, game_from_store)
	elseif message_id == hash("store_from_game") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, store_from_game)
	elseif message_id == hash("end_from_game") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, end_from_game)
	elseif message_id == hash("main_from_end") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, main_from_end)
	elseif message_id == hash("new_from_end") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, new_from_end)
	elseif message_id == hash("open_settings") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, open_settings)
	elseif message_id == hash("close_settings") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, close_settings)
	elseif message_id == hash("return_to_main") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 0, 0), easing, 1, 0, return_to_main)
	elseif message_id == hash("get_updated_screen_dimensions") then
		msg.post(sender, "update_screen_dimensions", {screen_dimensions = self.screen_dimensions})
	elseif message_id == hash("transition") then
		self.transition = vmath.vector4(0, 1, 0, 0)
		go.animate("#main", "transition", go.PLAYBACK_ONCE_PINGPONG, vmath.vector4(1, 1, 0, 0), easing, 1)
	elseif message_id == hash("apply_setting") then
		user_settings[message.id] = message.value
		apply_settings(self)
	elseif message_id == hash("advance_stage") then
		active_run_data.stage = active_run_data.stage + 1
		save_saved_data("active_run_data", active_run_data)
	elseif message_id == hash("end_run") then
		save_saved_data("active_run_data", default_active_run_data)
		save_saved_data("active_fleet", default_active_fleet)
		active_fleet = copy_table(default_active_fleet)
		active_run_data = copy_table(default_active_run_data)
	elseif message_id == hash("toggle_game_pause") then
		is_paused = is_paused ~= true
		if is_paused then
			msg.post("/borders#borders", "pause")
			msg.post("#cursor", "enable_cursor")
			go.animate("#main", "game_speed", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTQUAD, 1, 0, function(self) self.game_speed = 0 end)
		else
			msg.post("/borders#borders", "unpause")
			msg.post("#cursor", "disable_cursor")
			go.animate("#main", "game_speed", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTQUAD, 1, 0, function(self) self.game_speed = 1 end)
		end	
	elseif message_id == hash("save_fleet") then
		active_fleet = copy_table(message.fleet)
		save_saved_data("active_fleet", active_fleet)
	elseif message_id == hash("update_credits") then
		active_run_data.credits = message.credits
		save_saved_data("active_run_data", active_run_data)
	elseif message_id == hash("display_alert") then
		local alert = factory.create("#alert_factory", vmath.vector3(WIDTH/2, HEIGHT+200, 0), nil, nil, nil)
		msg.post(alert, "init", message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("debug") and action.released then
		debug = not debug
		profiler.enable_ui(debug)
	end
end