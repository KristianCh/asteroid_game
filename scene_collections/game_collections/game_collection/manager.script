go.property("enemy_count", 0)
go.property("ship_count", 0)

local function url_to_hash(url)
	local str =  hash_to_hex(url.socket or hash("")) .. hash_to_hex(url.path) .. hash_to_hex(url.fragment or hash(""))
	return hash(str)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.enemies = {}
	self.enemy_count = 0
	self.ships = {}
	self.ship_count = 0
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enemy_created") then
		self.enemies[url_to_hash(sender)] = sender
		self.enemy_count = self.enemy_count + 1
	elseif message_id == hash("enemy_destroyed") then
		self.enemies[url_to_hash(sender)] = nil
		self.enemy_count = self.enemy_count - 1
	elseif message_id == hash("ship_created") then
		self.ships[url_to_hash(sender)] = sender
		self.ship_count = self.ship_count + 1
	elseif message_id == hash("ship_destroyed") then
		self.ships[url_to_hash(sender)] = nil
		self.ship_count = self.ship_count - 1
		if self.ship_count <= 0 then
			msg.post("main:/manager", "end_from_game")
		end
	elseif message_id == hash("target_closest_enemy") then
		if self.enemy_count > 0 then 
			local shortest_distance = 100000000
			local enemy_url = msg.url()
			local found = false
			for k, v in pairs(self.enemies) do
				local distance = vmath.length(go.get_position(v) - message.pos)
				if distance < shortest_distance and distance < message.range then
					enemy_url = v
					shortest_distance = vmath.length(go.get_position(v) - message.pos)
					found = true
				end
			end
			msg.post(sender, "target_enemy_response", {found = found, enemy = enemy_url, dt = message.dt})
		else 
			msg.post(sender, "target_enemy_response", {found = false})
		end
	elseif message_id == hash("target_closest_ship") then
		if self.ship_count > 0 then 
			local shortest_distance = 100000000
			local ship_url = msg.url()
			local found = false
			for k, v in pairs(self.ships) do
				local distance = vmath.length(go.get_position(v) - message.pos)
				if distance < shortest_distance and distance < message.range then
					ship_url = v
					shortest_distance = vmath.length(go.get_position(v) - message.pos)
					found = true
				end
			end
			msg.post(sender, "target_ship_response", {found = found, ship = ship_url, dt = message.dt})
		else 
			msg.post(sender, "target_ship_response", {found = false})
		end
	elseif message_id == hash("target_ship_by_property") then
		if self.ship_count > 0 then 
			local closest = 100000000
			if message.get_by == "highest" then closest = 0 end
			local ship_url = msg.url()
			local found = false
			for k, v in pairs(self.ships) do
				local prop_value = go.get(v, message.property)
				if message.get_by == "highest" and prop_value > closest or message.get_by == "lowest" and prop_value < closest then
					ship_url = v
					closest = prop_value
					found = true
				end
			end
			msg.post(sender, "target_ship_response", {found = found, ship = ship_url, dt = message.dt})
		else 
			msg.post(sender, "target_ship_response", {found = false})
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("space") and action.released then
		local width, height = 1920, 1017
		if math.random() > 0.5 then
			local lr = math.random(0, 1)
			local p = vmath.vector3(-100 + (width+200) * lr, math.random(-100, height+100), 0)
			local props = {}
			props[hash("/base_asteroid")] = {initial_slowdown = 2}
			local ids = collectionfactory.create("#asteroid_collection_factory", p, nil, props)
			local velocity = vmath.vector3(0, math.random(-height, height), 0)
			local url = msg.url(nil, ids[hash("/base_asteroid")], "co3")
			msg.post(url, "apply_force", {force = velocity * 30, position = p + vmath.vector3(math.random(-20, 20), math.random(-20, 20), 0)})
		else 
			local ud = math.random(0, 1)
			local p = vmath.vector3(math.random(-100, width+100), -100 + (height+200) * ud, 0)
			local props = {}
			props[hash("/base_asteroid")] = {initial_slowdown = 2}
			local ids = collectionfactory.create("#asteroid_collection_factory", p, nil, props)
			local velocity = vmath.vector3(0, math.random(-height, height), 0)
			local url = msg.url(nil, ids[hash("/base_asteroid")], "co3")
			msg.post(url, "apply_force", {force = velocity * 30, position = p + vmath.vector3(math.random(-20, 20), math.random(-20, 20), 0)})
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
