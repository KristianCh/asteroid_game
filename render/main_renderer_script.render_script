--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

function init(self)
    self.constants = render.constant_buffer()
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.model_gui_pred = render.predicate({"model_gui"})
    self.fade_fb_pred = render.predicate({"fade"})
    self.fade_gui_pred = render.predicate({"fade_gui"})
    self.merge_framebuffers_pred = render.predicate({"merge_framebuffer"})
    self.pixelate_pred = render.predicate({"pixelate"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()
    self.near = -1
    self.far = 1
    self.projection_fn = fixed_fit_projection

    local color_params = {format = render.FORMAT_RGBA, 
        width = render.get_width(), height = render.get_height()}
    local target_params = {[render.BUFFER_COLOR_BIT] = color_params}
    self.mesh_target = render.render_target("mesh_original", target_params)
    self.sprite_target = render.render_target("sprite_original", target_params)
    self.gui_target = render.render_target("gui_original", target_params)
    self.fade_target = render.render_target("fade_original", target_params)
    self.pps_target = render.render_target("original", target_params)
end

function update(self)
    -------------------------------------------------------
    -- set up rendering
    render.enable_render_target(self.sprite_target)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, render.get_width(), render.get_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(get_projection(self))
    -------------------------------------------------------
    -- render sprites and particles
    render.draw(self.tile_pred, self.constants)
    render.draw(self.particle_pred)
    render.disable_render_target(self.sprite_target)
    -------------------------------------------------------
    -- render custom meshes
    render.enable_render_target(self.mesh_target)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_projection(get_projection(self))
    render.set_view(self.view)
    render.set_blend_func(render.BLEND_ONE, render.BLEND_ONE)
    render.draw(self.model_pred)
    render.draw_debug3d()    
    render.disable_render_target(self.mesh_target)
    -------------------------------------------------------
    -- render fading objects
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)  
    render.enable_render_target(self.fade_target)
    render.draw(self.model_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()    
    render.disable_render_target(self.fade_target)
    -------------------------------------------------------
    -- render GUI
    render.enable_render_target(self.gui_target)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)

    render.set_blend_func(render.BLEND_ONE, render.BLEND_ONE)
    render.disable_render_target(self.gui_target)

    render.enable_render_target(self.fade_target)
    render.draw(self.fade_gui_pred)
    render.disable_render_target(self.fade_target)
    
    render.enable_render_target(self.mesh_target)
    
    render.draw(self.model_gui_pred)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)  

    render.disable_render_target(self.mesh_target)
    
    render.disable_state(render.STATE_STENCIL_TEST)
    -------------------------------------------------------
    -- render to screen quad
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})

    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())

    render.enable_texture(3, self.fade_target, render.BUFFER_COLOR_BIT)
    
    render.enable_render_target(self.fade_target)
    render.set_viewport(0, 0, render.get_width(), render.get_height())
    render.draw(self.fade_fb_pred)    
    render.disable_render_target(self.fade_target)
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    
    render.enable_texture(0, self.mesh_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(1, self.sprite_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(2, self.gui_target, render.BUFFER_COLOR_BIT)
    
    --render.enable_render_target(self.pps_target)
    render.draw(self.merge_framebuffers_pred, self.constants)
    --render.disable_render_target(self.pps_target)
    
    render.disable_texture(0, self.mesh_target)
    render.disable_texture(1, self.sprite_target)
    render.disable_texture(2, self.gui_target)
    render.disable_texture(3, self.fade_target)

    --[[
    render.enable_texture(0, self.pps_target, render.BUFFER_COLOR_BIT)
    render.draw(self.pixelate_pred)
    render.disable_texture(0, self.pps_target)
    ]]--
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("set_time") then
        self.constants.time = vmath.vector4(message[1], 0, 0, 0)
    elseif message_id == hash("set_transition") then
        self.constants.transition = message[1]
    end
end
